"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var flowgearSdk_1 = require("./flowgearSdk");
var donutChart_1 = require("./donutChart");
var utility_1 = require("../utility");
var KeyValueCharts = /** @class */ (function (_super) {
    __extends(KeyValueCharts, _super);
    function KeyValueCharts(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            keyValueReportData: null,
            isDummyKeyValueReportData: false
        };
        return _this;
    }
    KeyValueCharts.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (utility_1.Utility.isDifferent(this.props, prevProps)) {
            this.handleRefresh();
        }
    };
    KeyValueCharts.prototype.render = function () {
        var _this = this;
        if (!this.state.keyValueReportData) {
            return null;
        }
        var panels = this.state.keyValueReportData.map(function (d) { return d.DashboardPanel; }).filter(function (value, index, self) { return self.indexOf(value) === index; });
        return (React.createElement("div", null,
            this.state.isDummyKeyValueReportData
                ?
                    React.createElement("div", { className: "empty-state", style: { paddingLeft: "50px", textAlign: "left" } },
                        "This area shows activity in your Site generated by Key-Values.",
                        React.createElement("div", { className: "empty-state-extra" },
                            "Get Started by setting up ",
                            React.createElement("a", { href: "#", onClick: function () {
                                    flowgearSdk_1.Flowgear.Sdk.openUrl("#sites/" + _this.props.siteId + "/keyvaluegroups");
                                } }, "Key/Value Groups.")))
                :
                    null,
            panels.map(function (panel) {
                return (React.createElement("div", { className: "row", key: panel },
                    React.createElement("div", { className: "big-text" }, panel),
                    React.createElement("div", null, _this.state.keyValueReportData.filter(function (f) { return f.DashboardPanel == panel; }).map(function (report, index) {
                        return (React.createElement("div", { className: "chart-block", key: index },
                            React.createElement(donutChart_1.DonutChart, { key: report.Group, title: report.DisplayName, values: report.Values })));
                    }))));
            })));
    };
    KeyValueCharts.prototype.handleRefresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            var endDate, startDate;
            return __generator(this, function (_a) {
                if (this.props.timeSecs == 0) {
                    this.setState({
                        keyValueReportData: null
                    });
                    return [2 /*return*/];
                }
                endDate = new Date();
                endDate.setSeconds(endDate.getSeconds() + 300);
                startDate = new Date();
                startDate.setSeconds(startDate.getSeconds() - this.props.timeSecs);
                this.handleGetKeyValueData(startDate, endDate);
                return [2 /*return*/];
            });
        });
    };
    KeyValueCharts.prototype.handleGetKeyValueData = function (startDate, endDate) {
        return __awaiter(this, void 0, void 0, function () {
            var urlTemplate, url, result, keyValueReportData, isDummyKeyValueReportData, saveThis;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        urlTemplate = "https://api{0}.flowgear.net/sites/{1}/keyvalues/report/?startDate={2}&endDate={3}";
                        url = utility_1.Utility.formatString(urlTemplate, [
                            this.props.pod,
                            this.props.siteId,
                            utility_1.Utility.formatUtcDate(startDate, "yyyy-MM-dd hh:mm"),
                            utility_1.Utility.formatUtcDate(endDate, "yyyy-MM-dd hh:mm")
                        ]);
                        return [4 /*yield*/, flowgearSdk_1.Flowgear.Sdk.invoke(url)];
                    case 1:
                        result = (_a.sent());
                        if (!result.success) {
                            return [2 /*return*/];
                        }
                        keyValueReportData = result.response;
                        isDummyKeyValueReportData = false;
                        saveThis = this;
                        if (keyValueReportData.length == 0) {
                            keyValueReportData = this.generateDummyKeyValueReportData();
                            isDummyKeyValueReportData = true;
                        }
                        keyValueReportData = keyValueReportData.sort(function (a, b) {
                            if (a.DashboardPanel < b.DashboardPanel) {
                                return -1;
                            }
                            else if (a.DashboardPanel > b.DashboardPanel) {
                                return 1;
                            }
                            else if (a.DashboardIndex < b.DashboardIndex) {
                                return -1;
                            }
                            else if (a.DashboardIndex > b.DashboardIndex) {
                                return 1;
                            }
                            else {
                                return 0;
                            }
                        });
                        this.setState({
                            keyValueReportData: null
                        }, function () {
                            saveThis.setState({
                                keyValueReportData: keyValueReportData,
                                isDummyKeyValueReportData: isDummyKeyValueReportData
                            });
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    KeyValueCharts.prototype.generateDummyKeyValueReportData = function () {
        return [
            {
                "Group": "Example",
                "DisplayName": "Example Customer Sync",
                "DashboardPanel": null,
                "DashboardIndex": 0,
                "Values": {
                    "InProgress": 4,
                    "Warning": 16,
                    "Success": 80
                }
            },
            {
                "Group": "Example",
                "DisplayName": "Example Order Sync",
                "DashboardPanel": null,
                "DashboardIndex": 0,
                "Values": {
                    "Warning": 5,
                    "Error": 5,
                    "Success": 40
                }
            }
        ];
    };
    return KeyValueCharts;
}(React.Component));
exports.KeyValueCharts = KeyValueCharts;
//# sourceMappingURL=keyValueCharts.js.map